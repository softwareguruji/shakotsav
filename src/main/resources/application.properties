# ===============================
# = DATA SOURCE
# ===============================
#spring.datasource.url=jdbc:mysql://localhost:3306/shakotsav
#spring.datasource.username=root
#spring.datasource.password=root

#Production on AWS Server
#spring.datasource.url=jdbc:mysql://shakotsav.ct50ilijyssl.ap-south-1.rds.amazonaws.com:3306/shakotsav
#spring.datasource.username=root
#spring.datasource.password=ketanbhavsar

#Production on Pravin's server
spring.datasource.url = jdbc:mysql://localhost:3306/shakotsav
spring.datasource.username = test
spring.datasource.password = test


# ===============================
# = JPA / HIBERNATE
# ===============================
spring.jpa.show-sql = true
spring.jpa.hibernate.ddl-auto = update
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# ===============================
# = Thymeleaf configurations
# ===============================
spring.thymeleaf.mode=LEGACYHTML5
spring.thymeleaf.cache=false

# ==============================================================
# = Spring Security / Queries for AuthenticationManagerBuilder  
# ==============================================================
spring.queries.users-query=select user_name, password, true from users where user_name=?
spring.queries.roles-query=select u.user_name, r.role from users u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.user_name=?